{"ast":null,"code":"(function (root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.getYouTubeID = factory();\n  }\n})(this, function (exports) {\n  return function (url, opts) {\n    if (opts == undefined) {\n      opts = {\n        fuzzy: true\n      };\n    }\n    if (/youtu\\.?be/.test(url)) {\n      // Look first for known patterns\n      var i;\n      var patterns = [/youtu\\.be\\/([^#\\&\\?]{11})/,\n      // youtu.be/<id>\n      /\\?v=([^#\\&\\?]{11})/,\n      // ?v=<id>\n      /\\&v=([^#\\&\\?]{11})/,\n      // &v=<id>\n      /embed\\/([^#\\&\\?]{11})/,\n      // embed/<id>\n      /\\/v\\/([^#\\&\\?]{11})/ // /v/<id>\n      ];\n\n      // If any pattern matches, return the ID\n      for (i = 0; i < patterns.length; ++i) {\n        if (patterns[i].test(url)) {\n          return patterns[i].exec(url)[1];\n        }\n      }\n      if (opts.fuzzy) {\n        // If that fails, break it apart by certain characters and look \n        // for the 11 character key\n        var tokens = url.split(/[\\/\\&\\?=#\\.\\s]/g);\n        for (i = 0; i < tokens.length; ++i) {\n          if (/^[^#\\&\\?]{11}$/.test(tokens[i])) {\n            return tokens[i];\n          }\n        }\n      }\n    }\n    return null;\n  };\n});","map":{"version":3,"names":["root","factory","exports","module","define","amd","getYouTubeID","url","opts","undefined","fuzzy","test","i","patterns","length","exec","tokens","split"],"sources":["D:/education-website/client/node_modules/get-youtube-id/index.js"],"sourcesContent":["\n(function (root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.getYouTubeID = factory();\n  }\n}(this, function (exports) {\n\n  return function (url, opts) {\n    if (opts == undefined) {\n      opts = {fuzzy: true};\n    }\n\n    if (/youtu\\.?be/.test(url)) {\n\n      // Look first for known patterns\n      var i;\n      var patterns = [\n        /youtu\\.be\\/([^#\\&\\?]{11})/,  // youtu.be/<id>\n        /\\?v=([^#\\&\\?]{11})/,         // ?v=<id>\n        /\\&v=([^#\\&\\?]{11})/,         // &v=<id>\n        /embed\\/([^#\\&\\?]{11})/,      // embed/<id>\n        /\\/v\\/([^#\\&\\?]{11})/         // /v/<id>\n      ];\n\n      // If any pattern matches, return the ID\n      for (i = 0; i < patterns.length; ++i) {\n        if (patterns[i].test(url)) {\n          return patterns[i].exec(url)[1];\n        }\n      }\n\n      if (opts.fuzzy) {\n        // If that fails, break it apart by certain characters and look \n        // for the 11 character key\n        var tokens = url.split(/[\\/\\&\\?=#\\.\\s]/g);\n        for (i = 0; i < tokens.length; ++i) {\n          if (/^[^#\\&\\?]{11}$/.test(tokens[i])) {\n            return tokens[i];\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n}));\n"],"mappings":"AACC,WAAUA,IAAI,EAAEC,OAAO,EAAE;EACxB,IAAI,OAAOC,OAAO,KAAK,QAAQ,EAAE;IAC/BC,MAAM,CAACD,OAAO,GAAGD,OAAO,EAAE;EAC5B,CAAC,MAAM,IAAI,OAAOG,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;IACrDD,MAAM,CAACH,OAAO,CAAC;EACjB,CAAC,MAAM;IACLD,IAAI,CAACM,YAAY,GAAGL,OAAO,EAAE;EAC/B;AACF,CAAC,EAAC,IAAI,EAAE,UAAUC,OAAO,EAAE;EAEzB,OAAO,UAAUK,GAAG,EAAEC,IAAI,EAAE;IAC1B,IAAIA,IAAI,IAAIC,SAAS,EAAE;MACrBD,IAAI,GAAG;QAACE,KAAK,EAAE;MAAI,CAAC;IACtB;IAEA,IAAI,YAAY,CAACC,IAAI,CAACJ,GAAG,CAAC,EAAE;MAE1B;MACA,IAAIK,CAAC;MACL,IAAIC,QAAQ,GAAG,CACb,2BAA2B;MAAG;MAC9B,oBAAoB;MAAU;MAC9B,oBAAoB;MAAU;MAC9B,uBAAuB;MAAO;MAC9B,qBAAqB,CAAS;MAAA,CAC/B;;MAED;MACA,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,QAAQ,CAACC,MAAM,EAAE,EAAEF,CAAC,EAAE;QACpC,IAAIC,QAAQ,CAACD,CAAC,CAAC,CAACD,IAAI,CAACJ,GAAG,CAAC,EAAE;UACzB,OAAOM,QAAQ,CAACD,CAAC,CAAC,CAACG,IAAI,CAACR,GAAG,CAAC,CAAC,CAAC,CAAC;QACjC;MACF;MAEA,IAAIC,IAAI,CAACE,KAAK,EAAE;QACd;QACA;QACA,IAAIM,MAAM,GAAGT,GAAG,CAACU,KAAK,CAAC,iBAAiB,CAAC;QACzC,KAAKL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,MAAM,CAACF,MAAM,EAAE,EAAEF,CAAC,EAAE;UAClC,IAAI,gBAAgB,CAACD,IAAI,CAACK,MAAM,CAACJ,CAAC,CAAC,CAAC,EAAE;YACpC,OAAOI,MAAM,CAACJ,CAAC,CAAC;UAClB;QACF;MACF;IACF;IAEA,OAAO,IAAI;EACb,CAAC;AAEH,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}